<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiquidXmlObjects.CompileTransactions</name>
    </assembly>
    <members>
        <member name="T:LiquidXmlObjects.CompileTransactions.LxRuntimeRequirementsWritten">
            <summary>Contains library level properties, and ensures the version of the runtime used matches the version used to generate it.</summary>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.LxBase">
            <summary>All generated Lx classes derive from this base class.</summary>
            <remarks>Notes to implementers. The class is declared partial, so additional members and properties can be added that will be available in all Lx generated classes.</remarks>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.LxBase.UnprocessedElements">
            <summary>Any child elements that do not belong in this element are added to the UnprocessedElements collection.</summary>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.LxBase.UnprocessedAttributes">
            <summary>Any attributes that do not belong in this element are added to the UnprocessedAttributes collection.</summary>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.Xs.AnyTypeCt">
            <summary>A class representing the root XSD complexType anyType@http://www.w3.org/2001/XMLSchema</summary>
            <XsdPath>schema:.../www.w3.org/2001/XMLSchema/complexType:anyType</XsdPath>
            <XsdFile>http://www.w3.org/2001/XMLSchema</XsdFile>
            <XsdLocation>Empty</XsdLocation>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.Xs.AnyTypeCt.#ctor">
            <summary>Constructor : create a <see cref="T:LiquidXmlObjects.CompileTransactions.Xs.AnyTypeCt" /> element &lt;anyType xmlns='http://www.w3.org/2001/XMLSchema'&gt;</summary>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm">
            <summary>A class representing the root XSD element winService</summary>
            <XsdPath>schema:CompileTransactions.xsd/element:winService</XsdPath>
            <XsdFile>C:\MyApps\SAPDataNet\CompileTransactions.xsd</XsdFile>
            <XsdLocation>4:5-36:18</XsdLocation>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.WinServices">
            <summary>A collection of <see cref="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm" /></summary>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAlls">
            <summary>A collection of <see cref="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm" /></summary>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm">
            <summary>Represent the inline xs:element compileAll.</summary>
            <XsdPath>schema:CompileTransactions.xsd/element:winService/sequence/choice/element:compileAll</XsdPath>
            <XsdFile>C:\MyApps\SAPDataNet\CompileTransactions.xsd</XsdFile>
            <XsdLocation>9:21-32:34</XsdLocation>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.Transactions">
            <summary>A collection of <see cref="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.TransactionElm" /></summary>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.CompileTime">
            <summary>A nullable <see cref="T:LiquidTechnologies.XmlObjects.LxDateTime" />, Optional : null when not set</summary>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.TransactionElm">
            <summary>Represent the inline xs:element transaction.</summary>
            <XsdPath>schema:CompileTransactions.xsd/element:winService/sequence/choice/element:compileAll/sequence/element:transaction</XsdPath>
            <XsdFile>C:\MyApps\SAPDataNet\CompileTransactions.xsd</XsdFile>
            <XsdLocation>12:33-28:46</XsdLocation>
        </member>
        <member name="P:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.TransactionElm.DataTable">
            <summary>A <see cref="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.TransactionElm.DataTableElm" />, Optional : null when not set</summary>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.Ns.WinServiceElm.CompileAllElm.TransactionElm.DataTableElm">
            <summary>Represent the inline xs:element dataTable.</summary>
            <XsdPath>schema:CompileTransactions.xsd/element:winService/sequence/choice/element:compileAll/sequence/element:transaction/sequence/element:dataTable</XsdPath>
            <XsdFile>C:\MyApps\SAPDataNet\CompileTransactions.xsd</XsdFile>
            <XsdLocation>15:45-25:58</XsdLocation>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.CompileTransactionsValidator">
            <summary>
            Provides a validator based on the original XSD schema files. 
            </summary>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.CompileTransactionsValidator.#ctor">
            <summary>
            Initializes the validator, loads and compiles the XSD schemas.
            </summary>
            <remarks>
            This is an expensive operation so consider caching this object.
            </remarks>
        </member>
        <member name="T:LiquidXmlObjects.CompileTransactions.SampleUsage">
            <summary>
            The following code is intended to demonstrate the basics of using the 
            Liquid XML Objects code you have just generated.
            
            The creation of the sample code is an option within the XML Data Binder
            Wizard and can be turned off.
            </summary>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.SimpleXmlReader">
            <summary>
            Demonstrates how to read XML data into a generated object.
            In this case the first element in your schema was selected.
            </summary>
            <remarks>
            LxSerializer.Deserialize has a number of other overloads
            allowing data to be read from a file/Stream/TextReader/XmlReader 
            </remarks>
            <exception cref="T:LiquidTechnologies.XmlObjects.LxSerializationException">LxSerializer.Deserialize will throw if the XML data contains errors</exception>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.XmlReaderWithErrorHandling">
            <summary>
            Demonstrates how to read XML data into a generated object, and take
            control of the error handling.
            </summary>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.XmlReaderWithErrorHandling_ErrorHandler(System.String,LiquidTechnologies.XmlObjects.LxErrorSeverity,LiquidTechnologies.XmlObjects.LxErrorCode,LiquidTechnologies.XmlObjects.TextLocation,System.Object)">
            <summary>
            This method is called when an error or warning is reported during
            the de-serialization process. 
            The method must throw an Exception in order to stop the de-serialization 
            process. If it returns, the error/warning is ignored.
            </summary>
            <param name="msg">The error message describing the issue</param>
            <param name="severity">The severity of the error</param>
            <param name="errorCode">The error code providing detail about the issue</param>
            <param name="location">The location of the issue in the source XML document</param>
            <param name="targetObject">The object the data is being de-serialized into (a Liquid XML Objects generated class)</param>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.SimpleXmlWriter">
            <summary>
            Demonstrates how to serialize a generated Liquid XML object to XML.
            In this case the first element in your schema was selected.
            </summary>
            <remarks>
            LxSerializer.Serialize has a number of other overloads
            allowing data to be written to a file/Stream/TextWriter/XmlWriter
            </remarks>
            <exception cref="T:LiquidTechnologies.XmlObjects.LxSerializationException">LxSerializer.Serialize will throw if the object being serialized contains errors</exception>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.XmlWriterWithErrorHandling">
            <summary>
            Demonstrates how to serialize a generated Liquid XML object to XML.
            In this case the first element in your schema was selected.
            </summary>
            <remarks>
            LxSerializer.Serialize has a number of other overloads
            allowing data to be written to a file/Stream/TextWriter/XmlWriter
            </remarks>
            <exception cref="T:LiquidTechnologies.XmlObjects.LxSerializationException">LxSerializer.Serialize will throw if the object being serialized contains errors</exception>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.XmlWriterWithErrorHandling_ErrorHandler(System.String,LiquidTechnologies.XmlObjects.LxErrorSeverity,LiquidTechnologies.XmlObjects.LxErrorCode,System.Object)">
            <summary>
            This method is called when an error or warning is reported during
            the serialization process. 
            The method must throw an Exception in order to stop the serialization 
            process. If it returns, the error/warning is ignored.
            </summary>
            <param name="msg">The error message describing the issue</param>
            <param name="severity">The severity of the error</param>
            <param name="errorCode">The error code providing detail about the issue</param>
            <param name="targetObject">The object the data is being de-serialized into (a Liquid XML Objects generated class)</param>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.ReadingXmlOfUnknownType">
            <summary>
            Typically when you read an XML document you know what the root element 
            should be, however in some instances the root element may not be known at 
            design time. This sample demonstrates how to deal with this.
            </summary>
            <exception cref="T:LiquidTechnologies.XmlObjects.LxException">LxSerializer.Deserialize will throw if the generated 
            Liquid XML Objects library does not contain an object capable of having the XML data 
            de-serialized into it.</exception>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.ValidateUsingOriginalXmlSchema">
            <summary>
            Uses the original XML Schemas to build a validator that can be used to
            validate the XML data directly or create a validating reader.
            </summary>
            <remarks>
            Note:
            CompileTransactionsValidator.Validate and CompileTransactionsValidator.CreateValidatingReader 
            has a number of other overloads allowing data to be read from a file/Stream/TextReader/XmlReader 
            </remarks>
        </member>
        <member name="M:LiquidXmlObjects.CompileTransactions.SampleUsage.ValidateUsingOriginalXmlSchema_ValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Called back when the CompileTransactionsValidator encounters validation errors and warnings
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
    </members>
</doc>
